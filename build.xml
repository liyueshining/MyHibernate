<?xml version="1.0"?>
<project name="MyHibernate"
         default="db" basedir="."
         xmlns:artifact="antlib:org.apache.maven.artifact.ant">
         
<!-- set up properties containing important project directories -->
<property name="source.root" value="src"/>
<property name="class.root" value="classes"/>
<property name="data.dir" value="data"/>
<property name="lib.dir" value="lib"/>

	
<!--set up the class path for compilation and execution-->
<path id="project.class.path">
	<!--include our own classes,ofcourse-->
	<pathelement location="${class.root}"/>
	<!--add the dependencies classpath-->
	<!--include  jars in the project library directory-->
	<fileset dir="${lib.dir}">
	  <include name="*.jar"/>
	</fileset>
</path>

<!--teach ant how to use the hibernate tools-->
<taskdef name="hibernatetool"
	classname="org.hibernate.tool.ant.HibernateToolTask"
	classpathref="project.class.path"/>
	
<target name="db" description="runs hsqldb database management ui 
    against the database file--use when application is not running">
    <java classname="org.hsqldb.util.DatabaseManager"
           fork="yes">
       <classpath refid="project.class.path"/>
       <arg value="-driver"/>
       <arg value="org.hsqldb.jdbcDriver"/>
       <arg value="-url"/>
       <arg value="jdbc:hsqldb:${data.dir}/music"/>
       <arg value="-user"/>
       <arg value="sa"/>
    </java>
</target>

<target name="classpath-print" description="show the class path">
<property name="class.path" refid="project.class.path"/>
<echo>${class.path}</echo>
</target>
	
<!--generate the java code for all mapping files in our source tree-->
<target name="codegen" depends="usertypes"
	    description="generate java source from the O/R mapping files">
  <hibernatetool destdir="${source.root}">
   <!--configuration>
    <fileset dir="${source.root}">
   	 <include name="**/*.hbm.xml"/>
    </fileset>
   </configuration-->
  	<configuration configurationfile="${source.root}/hibernate.cfg.xml"/>
   <hbm2java jdk5="true"/>
  </hibernatetool>
</target>

<!--create our runtime subdirectories and copy resources into them-->	
<target name="prepare" description="sets up build structures">
	<mkdir dir="${class.root}"/>
	<!--copy our property files and O/R mappings for use at runtime-->
	<copy todir="${class.root}">
		<fileset dir="${source.root}">
			<include name="**/*.properties"/>
			<include name="**/*.xml"/>
		</fileset>
	</copy>
</target>
	
<!--generate the schema for all mapping files in our class tree-->
<target name="schema" depends="compile"
	    description="generate db schema from the O/R mapping files">
	
	<hibernatetool destdir="${source.root}">
		<!--configuration>
			<fileset dir="${class.root}">
				<include name="**/*.hbm.xml"/>
			</fileset>
		</configuration-->
		<configuration configurationfile="${source.root}/hibernate.cfg.xml"/>
	<hbm2ddl drop="yes"/>
	</hibernatetool>
</target>

<target name="compile" depends="codegen"
	    description="compiles all java classes">
	<javac srcdir="${source.root}"
		   destdir="${class.root}"
	       debug="on"
		   optimize="off"
		   deprecation="on">
	<classpath refid="project.class.path"/>
	</javac>
</target>
	
<target name="ctest" description="creates and persists some sample data"
	    depends="compile">
	<java classname="com.oreilly.hh.CreateTest" fork="true">
		<classpath refid="project.class.path"/>
	</java>
</target>

<target name="qtest" description="run a simple hibernate query"
	    depends="compile">
	<java classname="com.oreilly.hh.QueryTest" fork="true">
		<classpath refid="project.class.path"/>
	</java>
</target>
	
<target name="qtest2" description="run a simple artist exploration gui"
	depends="compile">
	<java classname="com.oreilly.hh.QueryTest2" fork="true">
		<classpath refid="project.class.path"/>
	</java>
</target>
	
<target name="atest" description="creates and persists some album data" depends="compile">
	<java classname="com.oreilly.hh.AlbumTest" fork="true">
		<classpath refid="project.class.path"/>
    </java>
</target>

<!--compile the userType definitions so they can be used in the code generation phase-->
<target name="usertypes" depends="prepare"
	description="copile custom type defintions needed in by codegen">
   <javac srcdir="${source.root}"
   	      includes="com/oreilly/hh/*Type.java"
   	      destdir="${class.root}"
   	      debug="on"
   	      optimize="on"
   	      deprecation="on">
   	  <classpath refid="project.class.path"/>
   </javac>	
</target>
	
</project>  
